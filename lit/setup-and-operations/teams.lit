\title{Teams}{teams}

\use-plugin{concourse-docs}

Every pipeline and one-off build belongs to a \italic{team}.

A team is simply a conceptual owner and a separate namespace for data in
Concourse (pipelines, builds, etc.). Individual user access to a team is
determined by how the team is configured with \reference{fly-set-team}: either
by whitelisting local users or configuring external providers that are enabled
for the Concourse server (see \reference{auth-config}).

Once a user has logged into Concourse, they are authorized to perform actions
against the teams that have granted them access.

\split-sections
\table-of-contents

\section{
  \title{\aux{The }\code{main} team}{main-team}

  Out of the box, Concourse comes with a single team called \code{main}.

  The \code{main} team is an \italic{admin team}, meaning it can create and
  update other teams. Currently there is no way to promote a team to become an
  admin team, so \code{main} is a special-case.

  The \code{main} team is configured as part of the deployment itself as flags
  passed to the ATC. You can find more about the required flags in \reference{auth-config}.

  The values set in the auth flags take effect whenever the ATC starts up. This
  is done so that you can't get locked out and so that you can have Concourse
  sanely configured as soon as it comes up.

  Consult \code{concourse web --help} to discover the complete list of flags
  for configuring auth for the \code{main} team.
}

\section{
  \title{User Roles}

  Concourse comes with four roles: Concourse Admin, Team Owner, Team Member, Team Viewer

  \section{
    \title{Concourse Admin}{role-concourse-admin}
    A Concourse Admin role is granted to any member of the \reference{main-team}.
    Members of \reference{main-team} will automatically be Concourse Admins and
    have the ability to administrate teams using \reference{fly} e.g.
    \reference{fly-set-team}, \reference{fly-destroy-team}, \reference{fly-rename-team} etc.
    Given that all Concourse Admins must be a member of the \reference{main-team},
    all Concourse Admins must have at least one other role;
    and that would typically be the Team Owner role on the \reference{main-team}.
  }


  \section{
    \title{Team Owner}
    Team Owners have read, write and auth management capabilities within the
    scope of their team. For those familiar with Concourse today, the scope of
    allowed actions for a Team Owner is very closely aligned to today’s Concourse
    team member. The new change is that you can no longer rename your own team
    or destroy your own team as an owner.
  }

  \section{
    \title{Team Member}
    Team Member lets users operate within their teams in a read & write fashion;
    but prevents them from changing the auth configurations of their team.
  }

  \section{
    \title{Team Viewer}
    Team Viewer gives users “read-only” access to a team. This locks everything
    down, preventing users from doing a set-pipeline or hijack.
  }
  \section{
    \title{Roles and Permissions}
      \bold{\reference{fly} commands}
      \table{
        \table-row{Command}{Anon}{Admin}{Owner}{Member}{Viewer}
      }{
        \table-row{abort-build}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{builds}{✓}{}{✓}{✓}{✘}
      }{
        \table-row{check-resource}{✘}{}{✓}{✓}{✓}
      }{
        \table-row{checklist}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{containers}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{destroy-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{destroy-team}{✘}{✓}{✘}{✘}{✘}
      }{
        \table-row{execute}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{expose-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{format-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{get-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{help}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{hide-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{hijack}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{jobs}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{login}{✓}{}{}{}{}
      }{
        \table-row{logout}{✘}{}{✓}{✓}{✓}
      }{
        \table-row{order-pipelines}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{pause-job}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{pause-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{pipelines}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{prune-worker}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{rename-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{rename-team}{✘}{✓}{✘}{✘}{✘}
      }{
        \table-row{set-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{set-team}{✘}{✓}{✓}{✘}{✘}
      }{
        \table-row{status}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{sync}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{targets}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{teams}{✘}{✓}{✓}{✓}{✓}
      }{
        \table-row{trigger-job}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{unpause-job}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{unpause-pipeline}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{validate-pipeline}{✓}{}{✓}{✓}{✓}
      }{
        \table-row{volumes}{✘}{}{✓}{✓}{✘}
      }{
        \table-row{watch}{✓*}{}{✓}{✓}{✓}
      }{
        \table-row{workers}{✘}{}{✓}{✓}{✘}
      }

      \bold{Web UI}
      \table{
        \table-row{Page}{Action}{Owner}{Member}{Viewer}
      }{
        \table-row{Home (HD/Dashboard)}{View}{✓}{✓}{✓}
      }{
        \table-row{}{Login}{✘}{✘}{✘}
      }{
        \table-row{}{Logout}{✓}{✓}{✓}
      }{
        \table-row{}{Download \reference{fly}}{✓}{✓}{✓}
      }{
        \table-row{}{Pause Pipeline}{✓}{✓}{✘}
      }{
        \table-row{}{Resume Pipeline}{✓}{✓}{✘}
      }{
        \table-row{}{Reorder Pipeline}{✓}{✓}{✘}
      }{
        \table-row{Pipeline Page}{View}{✓}{✓}{✓}
      }{
        \table-row{}{Click to Resource}{✓}{✓}{✓}
      }{
        \table-row{}{Click to Build}{✓}{✓}{✓}
      }{
        \table-row{}{Click on Group}{✓}{✓}{✓}
      }{
        \table-row{Resource Page}{View Resource}{✓}{✓}{✓}
      }{
        \table-row{}{View Version Details}{✓}{✓}{✓}
      }{
        \table-row{}{Pin Version}{✓}{✓}{✘}
      }{
        \table-row{}{Paginate (<- ->)}{✓}{✓}{✓}
      }{
        \table-row{Build Page}{Trigger new Build}{✓}{✓}{✘}
      }{
        \table-row{}{View Build}{✓}{✓}{✓}
      }{
        \table-row{}{Build Details}{✓}{✓}{✓}
      }{
        \table-row{Job Page}{View Job Page}{✓}{✓}{✓}
      }{
        \table-row{}{Pause Job}{✓}{✓}{✘}
      }{
        \table-row{}{Trigger new Build}{✓}{✓}{✘}
      }{
        \table-row{}{Build History}{✓}{✓}{✓}
      }{
        \table-row{}{Paginate (<- ->)}{✓}{✓}{✓}
      }

  }
}

\section{
  \title{Creating & Updating Teams}

  \section{
    \title{\code{fly set-team}}{fly-set-team}

    Once you've \reference{fly-login}{logged in as the \code{main} team with
    \code{fly}}, you can run \reference{fly-set-team} to create or update other
    teams.

    Teams can also update their own configuration with the same command.

    For example, to create a new team that authorizes the local \code{foo}
    user, you would run:

    \codeblock{bash}{{{
    fly -t example set-team --team-name my-team \
      --local-user foo
    }}}

    There are many different ways to configure team auth; see
    \reference{authentication} for more information.

    Once the team has been created, you can use \reference{fly-login} to log in:

    \codeblock{bash}{{
    $ fly login -n my-team
    }}

    Any newly configured pipelines (via \reference{fly-set-pipeline}) and one-off
    builds (via \reference{fly-execute}) will be owned by the authorized team.
    Commands that list content will be scoped to the current team by default,
    such as \reference{fly-pipelines} and \reference{fly-builds}. The web UI
    should reflect the same state.

    Newly configured pipelines are hidden by default, meaning other teams and
    unauthorized visitors cannot view them. To make them publicly viewable, see
    \reference{exposing}.

    \section{

      \title{Adding User Roles}{adding-roles}

      The \code{-c} flag can be used on \reference{fly-set-team} to specify
      \reference{user-roles} on the team. The \code{-c} flag expects a
      \code{.yml} file with \code{roles}. Some of the attributes in the
      configuration will vary by provider; the details of which can be found in
      \reference{authentication}

      A sample configuration for adding users from different providers with different
      roles:

      \codeblock{bash}{{{
        roles:
        - name: owner
          github:
            users: ["admin"]
        - name: member
          github:
            teams: ["org:team"]
        - name: viewer
          github:
            orgs: ["org"]
          local:
            users: ["visitor"]
      }}}
    }
  }
}

\section{
  \title{Managing Teams}{managing-teams}

  \section{
    \title{\code{fly teams}}{fly-teams}

    To list all the teams, run:

    \codeblock{bash}{{
    $ fly -t example teams
    }}

    This can be useful if you've forgotten your team name.

    \bold{\code{fly teams -d}\aux{: With Details}}

    To list all the teams with authentication details and members, run:

    \codeblock{bash}{{
    $ fly -t example teams -d
    }}

    This can be helpful when debugging OAuth, OIDC groups or listing all individual members.
  }

  \section{
    \title{\code{fly rename-team}}{fly-rename-team}

    To rename a team, run:

    \codeblock{bash}{{{
    $ fly -t example rename-team --old-name my-team --new-name cool-team
    }}}

    This can only be run by the \reference{main-team}{\code{main} team}.
  }

  \section{
    \title{\code{fly destroy-team}}{fly-destroy-team}

    To remove a team, including all of its pipelines and one-off builds, first
    log in as the \reference{main-team}, and then run:

    \codeblock{bash}{{
    $ fly -t example destroy-team --team-name my-team
    }}

    Currently, if there were any workers assigned specifically to this team,
    they'll be orphaned, without having their containers or volumes cleaned up.
  }
}

\section{
  \title{Configuring Team Auth}{authentication}

  Continuous Integration servers often contain a considerable number of secrets
  to let them access source code and deploy applications. It is important that
  those secrets remain well guarded. Concourse provides options for both
  authentication and authorization to give you control over who can access your
  server and how much they can see.

  \aside{
    If you access your Concourse server over the public internet then all of
    the options below are useless without using TLS to secure your connection.
  }

  The authentication methods for teams are determined by flags passed to
  \reference{fly-set-team}, except for the \reference{main-team}, which is
  configured as part of the deployment. Alternatively, you can externalize the
  user configuration into a \code{yml} file and use it as an input to the \code{-c}
  flag on \reference{fly-set-team}.

  All users and groups added to a team are assigned the Team Member role by default.
  \reference{user-roles} on teams can only be specified through the \code{--configuration}
  or \code{-c} flag and will override the previous configuration.

  Any number of the following providers can be enabled at any one time. Users
  will be given a choice when logging in as to which one they would like to
  use.

  \warn{
    In order to use any of the auth providers listed below, you must first
    enable the provider by configuring any required information at deployment
    time as per the \reference{auth-config} guide.
  }

  \section{
    \title{Local Auth}{local-auth}

    You can grant \reference{local-auth-config}{local users} access to a team
    via the \code{--local-user} flag.

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --local-user some_username
    }}}

    or with \code{-c}:

    \codeblock{bash}{{{
    roles:
    - name: member
      local:
        users: ["some_username"]
    }}}

  }

  \section{
    \title{GitHub Auth}{github-auth}

    You can configure which organizations, teams, and individual users
    should have access to your team.

    This is done by passing the following flags:

    \definitions{
      \definition{\code{--github-user=LOGIN}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--github-org=ORG_NAME}}{
        Authorize an entire organization's members.
      }
    }{
      \definition{\code{--github-team=ORG_NAME:TEAM_NAME}}{
        Authorize a team's members within an organization.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --github-user my-github-login \
        --github-org my-org \
        --github-team my-other-org:my-team
    }}}
  }

    \section{
    \title{GitLab Auth}{gitlab-auth}

    You can configure which groups and individual users
    should have access to your team.

    This is done by passing the following flags:

    \definitions{
      \definition{\code{--gitlab-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--gitlab-group=GROUP_NAME}}{
        Authorize an entire groups's members.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --gitlab-user my-gitlab-user \
        --gitlab-team my-team
    }}}
  }

  \section{
    \title{CF Auth}{uaa-cf-auth}

    You can configure which org/space members from a CF deployment should have
    access to your team.

    \definitions{
      \definition{\code{--cf-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--cf-org=ORG_NAME}}{
        Authorize an entire organization's members.
      }
    }{
      \definition{\code{--cf-space=ORG_NAME:SPACE_NAME}}{
        Authorize the members of a space within an organization.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --cf-user my-username \
        --cf-org my-org \
        --cf-space my-other-org:my-space
    }}}
  }

  \section{
    \title{Generic oAuth}{generic-oauth}

    You can configure users and groups from a generic oAuth provider.

    You may only configure groups if the auth provider exposes this information
    in either the token itself, or in the contents of the userinfo endpoint.
    You can configure which claim points to the groups information by specifying
    the \code{groups-key} at startup.

    \definitions{
      \definition{\code{--oauth-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--oauth-group=GROUP_NAME}}{
        Authorize anyone from the group.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --oauth-user my-username \
        --oauth-group my-group
    }}}
  }

  \section{
    \title{Generic OIDC}{generic-oidc}

    You can configure users and groups from a generic OIDC provider. This is
    very similar to the oAuth connector. The main difference being that OIDC
    providers must adhere to the OIDC specification, whereas generic oAuth
    providers can be a little more flexible.

    You may only configure groups if the auth provider exposes this information
    in the contents of the userinfo endpoint. You can configure which claim
    points to the groups information by specifying the \code{groups-key} at
    startup.

    \definitions{
      \definition{\code{--oidc-user=USERNAME}}{
        Authorize an individual user.
      }
    }{
      \definition{\code{--oidc-group=GROUP_NAME}}{
        Authorize anyone from the group.
      }
    }

    For example:

    \codeblock{bash}{{{
    $ fly set-team -n my-team \
        --oidc-user my-username \
        --oidc-group my-group
    }}}
  }

  \section{
    \title{Debugging Team Auth Configuration}{team-auth-debugging}

    You can list users and groups for all teams pertaining how the team is
    created based on group or individual user. Helpful for troubleshooting.

    For example:

    \codeblock{bash}{{{
    $ fly -t target teams -d
    }}}

    When authentication errors occur look at concourse TSA logs.

    Also, make sure workers and web UI are restarted when fundamental changes
    occur to the auth configurations (i.e. changing the callback URL.)
  }
}

\section{
  \title{Pipeline & Build Visibility}{exposing}

  Every newly configured pipeline is hidden to anyone but the pipeline's team.
  To make a pipeline publicly viewable, both by other teams and unauthenticated
  users, see \reference{fly-expose-pipeline}.

  Even with a pipeline exposed, all build logs are hidden by default. This is
  because CI jobs are prone to leaking credentials and other...unsavory
  information. After you've determined that a job's builds should be safe for
  public consumption, you can set \reference{job-public}{\code{public: true}}
  on the job in your pipeline.
}

\section{
  \title{Security Caveats}{teams-caveats}

  At present, teams only provide \italic{trusted multi-tenancy}. This means it
  should be used for cases where you know and trust who you're allowing access
  into your Concourse cluster.

  There are a few reasons it'd be a bad idea to do otherwise:

  \list{
    Any team can run builds with \reference{task-step-privileged} tasks. A bad
    actor in the mix could easily use this to harm your workers and your
    cluster.

    In the future, we'll probably have this as a flag on a team, indicating
    whether they're permitted to run privileged builds.
  }{
    There are no networking restrictions in place, and traffic to and from the
    workers is currently unencrypted and unauthorized. Anyone could run a task
    that does horrible things to your worker's containers, possibly stealing
    sensitive information.

    This can be remedied with configuration specified on Garden to restrict
    access to the internal network, but this is not detailed in our docs, and
    we'll probably want to find a better answer than configuration in the
    future.
  }
}
