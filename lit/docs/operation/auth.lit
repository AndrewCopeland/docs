\title{Configuring Auth Providers}{auth-config}

\use-plugin{concourse-docs}

TODO: DESCRIBE PROVIDER CONFIG VS TEAM CONFIG AND HOW THEY DIFFER INSTEAD OF
HAVING TWO SECTIONS WITH REPEATED INFO

An operator will need to provide the following information to \code{concourse
web} upon startup:

\list{
  \reference{local-auth-config}{Locally configured} users
}{
  Third-party auth providers (e.g. \reference{github-auth-config},
  \reference{cf-auth-config}, etc.)
}{
  Users who should be members of the \reference{main-team} (either local or
  from auth providers)
}

\split-sections
\table-of-contents

\section{
  \title{Local Auth}{local-auth-config}

  \omit-children-from-table-of-contents

  In order to add new users to the system, you can supply the
  \code{--add-local-user} flag to the \code{concourse web} subcommand like
  so:

  \codeblock{bash}{{{
  concourse web \
    --add-local-user myuser:mypass
  }}}

  This will allow someone to log in with the username \code{myuser} and
  password \code{mypass}. Note that this user doesn't intrinsically have
  access to anything - they must be granted access on a team-by-team basis
  (see \reference{teams}).

  \section{
    \title{Adding Local Users to the \code{main} Team}

    Once you have added the user \code{myuser}, you can add them to the
    \reference{main-team}:

    \codeblock{bash}{{{
    concourse web \
      ...
      --main-team-local-user myuser
    }}}
  }
}

\section{
  \title{GitHub Auth}{github-auth-config}

  \omit-children-from-table-of-contents

  A Concourse server can authenticate against GitHub to take advantage of
  their permission model and other security improvements in their
  infrastructure.

  \section{
    \title{Creating a GitHub application}

    First you need to \link{create an OAuth application on
    GitHub}{https://github.com/settings/applications/new}.

    The callback URL will be the external URL of your Concourse server with
    \code{/sky/issuer/callback} appended. For example, Concourse's own CI
    server's callback URL would be
    \code{https://ci.concourse-ci.org/sky/issuer/callback}.
  }

  \section{
    \title{Configuring the client}

    You will be given a Client ID and a Client Secret for your new
    application. These will then be passed as the following flags to
    \code{concourse web}:

    \list{
      \code{--github-client-id=CLIENT_ID}
    }{
      \code{--github-client-secret=CLIENT_SECRET}
    }

    Note that the client must be created under an \italic{organization} if
    you want to authorize users based on organization/team membership. If the
    client is created under a personal account, only individual users can be
    authorized.

    Here's a full example:

    \codeblock{bash}{{{
    concourse web \
      --github-client-id CLIENT_ID \
      --github-client-secret CLIENT_SECRET
    }}}

    If you're configuring GitHub Enterprise, you'll also need to set the
    following flags:

    \list{
      \code{--github-host=github.example.com}
    }{
      \code{--github-ca-cert=/tmp/some-cert}
    }

    The GitHub Enterprise host should not contain a scheme, or a trailing
    slash.
  }

  \section{
    \title{Adding GitHub Users to the \code{main} Team}

    Once you have added the GitHub auth connector, you can specify a GitHub
    Organization, GitHub Team, and/or GitHub User to the
    \reference{main-team}.

    \codeblock{bash}{{{
      concourse web \
        ... \
        --main-team-github-org=ORG_NAME \
        --main-team-github-team=ORG_NAME:TEAM_NAME \
        --main-team-github-user=USERNAME
    }}}
  }
}

\section{
  \title{GitLab Auth}{gitlab-auth-config}

  \omit-children-from-table-of-contents

  A Concourse server can authenticate against GitLab to take advantage of
  their permission model.

  \section{
    \title{Creating a GitLab application}

    First you need to \link{create an OAuth application on
    GitLab}{https://gitlab.com/profile/applications}.

    The redirect URI will be the external URL of your Concourse server with
    \code{/sky/issuer/callback} appended. For example, Concourse's own CI
    server's callback URL would be
    \code{https://ci.concourse-ci.org/sky/issuer/callback}.
  }

  \section{
    \title{Configuring the client}

    You will be given a Client ID and a Client Secret for your new
    application. These will then be passed as the following flags to
    \code{concourse web}:

    \list{
      \code{--gitlab-client-id=CLIENT_ID}
    }{
      \code{--gitlab-client-secret=CLIENT_SECRET}
    }

    Here's a full example:

    \codeblock{bash}{{{
    concourse web \
      --gitlab-client-id CLIENT_ID \
      --gitlab-client-secret CLIENT_SECRET
    }}}

    If you're configuring a self hosted GitLab instance, you'll also need
    to set the following flag:

    \list{
      \code{--gitlab-host=https://gitlab.example.com}
    }

    The GitLab host must contain a scheme and not a trailing slash.
  }

  \section{
    \title{Adding GitLab Users to the \code{main} Team}

    Once you have added the GitLab auth connector, you can specify a GitLab
    Group and/or GitLab User to the
    \reference{main-team}.

    \codeblock{bash}{{{
      concourse web \
        ... \
        --main-team-gitlab-group=GROUP_NAME \
        --main-team-gitlab-user=USERNAME
    }}}
  }
}

\section{
  \title{CF Auth}{cf-auth-config}

  \omit-children-from-table-of-contents

  Cloud Foundry (CF) Auth can be used for operators who wish to authenticate
  their users configured against their Cloud Foundry instance via the UAA
  product.

  \section{
    \title{Creating the client}

    You'll first need to create a client for Concourse in UAA.

    The callback URL will be the external URL of your Concourse server with
    \code{/sky/issuer/callback} appended. For example, Concourse's own CI
    server's callback URL would be
    \code{https://ci.concourse-ci.org/sky/issuer/callback}.

    The client should look something like this, under
    \link{\code{uaa.clients}}{http://bosh.io/jobs/uaa?source=github.com/cloudfoundry/uaa-release&version=13#p=uaa.clients}:

    \codeblock{yaml}{{
      concourse:
        id: my-client-id
        secret: my-client-secret
        scope: openid,cloud_controller.read
        authorized-grant-types: "authorization_code,refresh_token"
        access-token-validity: 3600
        refresh-token-validity: 3600
        redirect-uri: https://concourse.example.com/sky/issuer/callback
    }}
  }

  \section{
    \title{Configuring the client}

    You will be given a Client ID and a Client Secret for your new
    application. These will then be passed as the following flags to
    \code{concourse web}:

    \list{
      \code{--cf-client-id=CLIENT_ID}
    }{
      \code{--cf-client-secret=CLIENT_SECRET}
    }

    You will also need to configure your base API URL for CF. We will use
    this url to discover information used for authentication.

    \list{
      \code{--cf-api-url=CF_API_URL}
    }

    Here's a full example:

    \codeblock{bash}{{{
    concourse web \
      --cf-client-id CLIENT_ID \
      --cf-client-secret CLIENT_SECRET \
      --cf-api-url CF_API_URL
    }}}
  }

  \section{
    \title{Adding CF Users to the \code{main} Team}

    Once you have added the CF auth connector you can add a CF Org, CF Space,
    CF Space GUID and/or CF User to the \reference{main-team}.

    \codeblock{bash}{{{
      concourse web \
        ... \
        --main-team-cf-org=ORG_NAME \
        --main-team-cf-space=ORG_NAME:SPACE_NAME \
        --main-team-cf-space-guid=SPACE_GUID \
        --main-team-cf-user=USERNAME
    }}}
  }
}

\section{
  \title{Generic OIDC}{generic-oidc-config}

  \omit-children-from-table-of-contents

  If your auth provider adheres to the OIDC specification then you should use
  this provider. Unlike the oAuth provider you don't need to provide the
  \code{auth-url}, \code{token-url} and \code{userinfo-url}. Instead you
  can simply provide an \code{issuer-url} and the system will query the
  \code{.well-known/openid-configuration} endpoint to discover all the
  information it needs.

  \section{
    \title{Creating the client}

    You'll first need to create a client with your OIDC provider.

    The callback URL will be the external URL of your Concourse server with
    \code{/sky/issuer/callback} appended. For example, Concourse's own CI
    server's callback URL would be
    \code{https://ci.concourse-ci.org/sky/issuer/callback}.
  }

  \section{
    \title{Configuring the client}

    Configuring generic OIDC for X company's internal OIDC service may look
    something like:

    \codeblock{bash}{{{
    concourse web \
      --oidc-display-name='X' \
      --oidc-client-id=CLIENT_ID \
      --oidc-client-secret=CLIENT_SECRET \
      --oidc-issuer=https://oidc.example.com
    }}}
  }

  \section{
    \title{Adding OIDC Users to the \code{main} Team}

    Once you have added the OIDC auth connector you can add a Group and/or
    User to the \reference{main-team}.

    \codeblock{bash}{{{
      concourse web \
        ... \
        --main-team-oidc-group=GROUP_NAME \
        --main-team-oidc-user=USERNAME
    }}}
  }
}

\section{
  \title{Generic oAuth}{generic-oauth-config}

  \omit-children-from-table-of-contents

  If your auth provider supports oAuth2 but doesn't adhere to the OIDC
  specification then you should be using this provider. It's mostly the same
  as the OIDC provider except it gives you more control over specifying the
  full set of authorization endpoints (\code{auth-url}, \code{token-url}).

  \section{
    \title{Creating the client}

    First you'll need to create a client with your oAuth provider.

    The callback URL will be the external URL of your Concourse server with
    \code{/sky/issuer/callback} appended. For example, Concourse's own CI
    server's callback URL would be
    \code{https://ci.concourse-ci.org/sky/issuer/callback}.
  }

  \section{
    \title{Configuring the client}

    Configuring generic oAuth for X company's internal oAuth service may look
    something like:

    \codeblock{bash}{{{
    concourse web \
      --oauth-display-name='X' \
      --oauth-client-id=CLIENT_ID \
      --oauth-client-secret=CLIENT_SECRET \
      --oauth-auth-url=https://oauth.example.com/oauth2/auth \
      --oauth-token-url=https://oauth.example.com/oauth2/token \
      --oauth-userinfo-url=https://oauth.example.com/oauth2/userinfo
    }}}
  }

  \section{
    \title{Adding OAuth Users to the \code{main} Team}

    Once you have added the OAuth auth connector you can add a Group and/or
    User to the \reference{main-team}.

    \codeblock{bash}{{{
    concourse web \
      ... \
      --main-team-oidc-group=GROUP_NAME \
      --main-team-oidc-user=USERNAME
    }}}
  }
}

\section{
  \title{LDAP}{ldap-config}

  \omit-children-from-table-of-contents

  The LDAP connector can be used for operators who wish to authenticate their
  users against an LDAP server.

  \definitions{
    \definition{\code{--ldap-display-name}}{
      The auth provider name displayed to users on the login page.
    }
  }{
    \definition{\code{--ldap-host}}{
      \italic{(Required)} The host and optional port of the LDAP server. If
      port isn't supplied, it will be guessed based on the TLS configuration
      (389 or 636).
    }
  }{
    \definition{\code{--ldap-bind-dn}}{
      \italic{(Required)} Bind DN for searching LDAP users and groups.
      Typically this is a read-only user.
    }
  }{
    \definition{\code{--ldap-bind-pw}}{
      \italic{(Required)} Bind Password for the user specified by
      \code{bind-dn}
    }
  }{
    \definition{\code{--ldap-insecure-no-ssl}}{
      Required if LDAP host does not use TLS
    }
  }{
    \definition{\code{--ldap-insecure-skip-verify}}{
      Skip certificate verification
    }
  }{
    \definition{\code{--ldap-start-tls}}{
      Start on insecure port, then negotiate TLS
    }
  }{
    \definition{\code{--ldap-ca-cert}}{
      CA certificate
    }
  }

  Optionally, you can supply User Search or Group Search parameters.

  \section{
    \title{User Search}

    \definitions{
      \definition{\code{--ldap-user-search-base-dn}}{
        BaseDN to start the search from. For example \code{cn=users,dc=example,dc=com}
      }
    }{
      \definition{\code{--ldap-user-search-filter}}{
        Optional filter to apply when searching the directory. For example
        \code{(objectClass=person)}
      }
    }{
      \definition{\code{--ldap-user-search-username}}{
        Attribute to match against the inputted username. This will be
        translated and combined with the other filter as
        \code{(<attr>=<username>)}.
      }
    }{
      \definition{\code{--ldap-user-search-scope}}{
        Can either be: \code{sub} - search the whole sub tree or \code{one}
         - only search one level. Defaults to \code{sub}.
      }
    }{
      \definition{\code{--ldap-user-search-id-attr}}{
        A mapping of attributes on the user entry to claims. Defaults to
        \code{uid}
      }
    }{
      \definition{\code{--ldap-user-search-email-attr}}{
        A mapping of attributes on the user entry to claims. Defaults to
        \code{mail}.
      }
    }{
      \definition{\code{--ldap-user-search-name-attr}}{
        A mapping of attributes on the user entry to claims.
      }
    }
  }

  \section{
    \title{Group Search}

    \definitions{
      \definition{\code{--ldap-group-search-base-dn}}{
        BaseDN to start the search from. For example \code{cn=users,dc=example,dc=com}
      }
    }{
      \definition{\code{--ldap-group-search-filter}}{
        Optional filter to apply when searching the directory. For example
        \code{(objectClass=posixGroup)}
      }
    }{
      \definition{\code{--ldap-group-search-scope}}{
        Can either be: \code{sub} - search the whole sub tree or \code{one}
         - only search one level. Defaults to \code{sub}.
      }
    }{
      \definition{\code{--ldap-group-search-user-attr}}{
        Adds an additional requirement to the filter that an attribute in the
        group match the user's attribute value. The exact filter being added
        is: \code{(<groupAttr>=<userAttr value>)}
      }
    }{
      \definition{\code{--ldap-group-search-group-attr}}{
        Adds an additional requirement to the filter that an attribute in the
        group match the user's attribute value. The exact filter being added
        is: \code{(<groupAttr>=<userAttr value>)}
      }
    }{
      \definition{\code{--ldap-group-search-name-attr}}{
        The attribute of the group that represents its name.
      }
    }
  }
}

\section{
  \title{Dex Connectors & Future Providers}

  Concourse uses a fork of \link{coreos/dex}{https://github.com/coreos/dex}
  for its authentication. You can find additional documentation on the
  supported auth providers in the dex
  \link{connectors documentation}{https://github.com/dexidp/dex/tree/master/Documentation/connectors}


  Adding a new auth provider to Concourse is as simple as submitting a pull
  request to our fork at \link{concourse/dex}{https://github.com/concourse/dex}
  and then adding a bit of configuration to
  \link{concourse/skymarshal}{https://github.com/concourse/skymarshal}.
}
