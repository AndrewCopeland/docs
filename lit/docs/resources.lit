\use-plugin{concourse-docs}

\title{Resources}{resources}

\reference{resources}{Resources} are the objects that are going to be used
for jobs in the pipeline. They are listed under the \code{resources} key in
the pipeline configuration.

Resources are fetched via \reference{get-step}{\code{get} steps} and pushed to via \reference{put-step}{\code{put} steps}.

Each configured resource consists of the following attributes:

\define-attribute{name: string}{
  \italic{Required.} The name of the resource. This should be short and simple.
  This name will be referenced by \reference{build-plans}{build plans} of jobs
  in the pipeline.
}{resource-name}

\define-attribute{type: string}{
  \italic{Required.} The type of the resource. Each worker advertises a mapping
  of \code{resource-type -> container-image}; \code{type} corresponds to the
  key in the map.

  To see what resource types your deployment supports, check the status of your
  worker pool via the \code{/api/v1/workers} API endpoint.
}{resource-type}

\define-attribute{source: object}{
  \italic{Optional.} The location of the resource. This varies
  by resource type, and is a black box to Concourse; it is blindly passed to
  the resource at runtime.

  To use \code{git} as an example, the source may contain the repo URI, the
  branch of the repo to track, and a private key to use when pushing/pulling.

  By convention, documentation for each resource type's configuration is
  in each implementation's \code{README}.

  You can find the source for the resource types provided with Concourse at the
  \link{Concourse GitHub
  organization}{https://github.com/concourse?query=-resource}.
}{resource-source}

\define-attribute{version: object}{
  \italic{Optional.} A version to pin the resource to across the pipeline. This
  has the same effect as setting \reference{get-step-version} on every
  \reference{get-step} referencing the resource.

  Resources can also be temporarily pinned to a version via the API and web UI.
  However this functionality is disabled if the resource is pinned via
  configuration, and if a pipeline is configured to have a version pinned while
  also pinned in the web UI, the configuration takes precedence and will clear
  out the temporary pin.
}{resource-version}

\define-attribute{check_every: string}{
  \italic{Optional. Default \code{1m}.} The interval on which to check for new
  versions of the resource. Acceptable interval options are defined by the
  \link{time.ParseDuration function}{https://golang.org/pkg/time/#ParseDuration}.
}{resource-check-every}

\define-attribute{tags: [string]}{
  \italic{Optional. Default \code{[]}.} A list of tags to determine which
  workers the checks will be performed on. You'll want to specify this if the
  source is internal to a worker's network, for example. See also
  \reference{tags-step-modifier}.
}{resource-tags}

\define-attribute{webhook_token: string}{
  \italic{Optional.} If specified, web hooks can be sent to trigger an
  immediate \italic{check} of the resource, specifying this value as a
  primitive form of authentication via query params.

  After configuring this value, you would then configure your hook sender with
  the following painfully long path appended to your external URL:

  \code{{
    /api/v1/teams/TEAM_NAME/pipelines/PIPELINE_NAME/resources/RESOURCE_NAME/check/webhook?webhook_token=WEBHOOK_TOKEN
  }}

  Note that the request payload sent to this API endpoint is entirely ignored.
  You should configure the resource as if you're not using web hooks, as the
  resource config is still the "source of truth."
}{resource-webhook-token}

\split-sections

\include-section{resources/managing.lit}
