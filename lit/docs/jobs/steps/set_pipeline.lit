\use-plugin{concourse-docs}

\title{\code{set_pipeline} step}{set-pipeline-step}
\warn{The \code{set_pipeline} step was introduced in Concourse v5.8.0. It is
considered an \bold{experimental} feature, until its associated
\link{RFC}{https://github.com/concourse/rfcs/pull/31} is resolved.}

Configures a Concourse pipeline.

\right-side{Examples}{
  \example{One pipeline reconfiguring another}{
    This is a way to ensure a pipeline stays up to date with its definition in
    a source code repository, eliminating the need to manually run
    \reference{fly-set-pipeline}.

    \codeblock{yaml}{{
    resources:
    - name: booklit
      type: git
      source: {uri: https://github.com/vito/booklit}
    jobs:
    - name: reconfigure
      plan:
      - get: booklit
        trigger: true
      - set_pipeline: booklit
        file: booklit/ci/pipeline.yml
    }}
  }
}

\define-attribute{set_pipeline: string}{
  \italic{Required.} The name of the pipeline to configure.
}{set-pipeline-step-set-pipeline}

\define-attribute{file: string}{
  \italic{Required.} The path to the pipeline's configuration file.

  \code{file} points at a \code{.yml} file containing the pipeline
  configuration, which allows this to be tracked with your resources.

  The first segment in the path should refer to another source from the plan,
  and the rest of the path is relative to that source.

  For example, if in your plan you have the following
  \reference{get-step}{\code{get}} step:

  \codeblock{yaml}{{
    - get: something
  }}

  And the \code{something} resource provided a \code{pipeline.yml} file, you
  would set \code{file: something/pipeline.yml}.
}{set-pipeline-step-file}

\define-attribute{vars: object}{
  \italic{Optional.} A map of template variables to pass to the pipeline config.

  For example, a var may be statically passed like so:

  \codeblock{yaml}{{
  plan:
  - get: my-repo
  - set_pipeline: configure-the-pipeline
    file: my-repo/ci/pipeline.yml
    vars:
      text: "Hello World!"
  }}

  This means that any \reference{pipeline-vars}{\code{((vars))}} in the pipeline
  will be resolved using this field. For example, if
  \code{my-repo/ci/pipeline.yml} looks like

  \codeblock{yaml}{{
  resources:
  - name: task-image
      type: docker-image
      source:
        repository: my.local.registry:8080/my/image
        username: ((myuser))
        password: ((mypass))
  jobs:
  - name: job
    plan:
    - get: task-image
    - task: do-stuff
      image: task-image
      config:
        platform: linux
        run:
          path: echo
          args: ["((text))"]
  }}

  ...this will resolve \code{"((text))"} to \code{{"Hello World!"}}, while
  \code{((myuser))} and \code{((mypass))}  will be resolved in runtime via a
  \reference{creds}{credential manager}, if it has been configured.

  Note that variables set with this field will not propagate to tasks configured
  via \reference{task-step-file}. If you want those variables to be determined
  at the time the pipeline is set, use \reference{task-step-vars} as well.
}{set-pipeline-step-vars}

\define-attribute{var_files: [string]}{
  \italic{Optional.} A list of paths to \code{.yml} files that will be passed
  to the pipeline config in the same manner as the \code{--load-vars-from} flag
  to \reference{fly-set-pipeline} -- this means that if a variable appears in
  multiple files, the value from a file that is passed later in the list will
  override the values from files earlier in the list.
}{set-pipeline-step-var-files}
